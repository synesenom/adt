- var name = "dashboard-utils"
- var dependencyDir = "dependencies/"
- var cssDependencies = ["wp"]
- var jsDependencies = ["highlight.9.12.0"]
- var sections = [{name: "description", content: "<span style='color:dodgerblue;font-weight:bold'>dashboard-utils</span> is a collection of useful modules for building interactive dashboards. It is built on top of the original <a href=\'https://github.com/sonyxperiadev/adt\'>adt</a> library that Sony Mobile was so generous to open source."}, {name: "installing", children: [{name: "browser", content: "Just include the required modules (and their dependencies):<pre><code class='css'>&lt;script src='module_name.min.js'&gt;&lt;/script&gt;</code></pre>"}, {name: "node", content: "<pre><code class='bash'>npm install dashboard-utils</code></pre>"}]}, {name: "requirements", content: "Some of the modules rely on external libraries. Here is a complete list of all dependencies:<dl class='custom'><dt><code>d3@4</code></dt><dd>SVG manipulation library. [ <a href='https://d3js.org'>website</a> ]</dd><dt><code>topojson</code></dt><dd>Module for reading TopoJSON files. [ <a href='https://github.com/topojson'>github</a> ]</dd><dt><code>lodash</code></dt><dd>A set of useful utility methods. [ <a href='https://lodash.com'>website</a> ]</dd></dl>For module specific dependencies, see the documentation."}, {name: "catalogue", content: "<a href='catalogue'>Here</a> is a list of some example code and features to help you start off with the library."}, {name: "docs", content: "Below you find the contents of the API documentation for the modules. With the exception of the widgets, each module is a standalone script that can be loaded and used as it is right out of the box. For the widgets, the module <code>du.widget</code> needs to be loaded first.", children: [{name: "data", content: "A collection of useful data structures for representing and manipulating various data sets.", docs: true, source: true}, {name: "rest", content: "Some convenience methods for accessing REST APIs for different file formats.", docs: true, source: true}, {name: "signals", content: "A module for managing event subscriptions and event emitters.", docs: true, source: true}, {name: "system", content: "Namespace for system related operations such as logging and version management.", children: [{name: "system.log", content: "An enhanced logger for development and monitoring during production.", docs: true, source: true}, {name: "system.version", content: "Module for automatic version checking and version updates.", docs: true, source: true}]}, {name: "user", content: "Collection of methods for handling different user inputs", docs: true, source: true}, {name: "widget", content: "The base class for all widgets. Methods implemented for this class are available for all dashboard components.", docs: true, source: true}, {name: "widgets", content: "The namespace of all available dashboard widgets. Widgets can be charts showing data, control elements to interact with the data or static labels or hints.", children: [{name: "widgets.areachart", content: "An interactive area chart for volume like data.", docs: true, source: true, example: true}, {name: "widgets.barchart", content: "An interactive bar chart for categorical data.", docs: true, source: true, example: true}, {name: "widgets.chordchart", content: "An interactive chord chart to visualize flow data.", docs: true, source: true, example: true}, {name: "widgets.grid", content: "A flexible grid that can contain and manage multiple other widgets.", docs: true, source: true, example: true}, {name: "widgets.hint", content: "Small text bubbles for providing aid to the user about the dashboard elements.", docs: true, source: true, example: true}, {name: "widgets.info", content: "An information window that can be used to provide more detailed description (help menu, about) for the dashboard", docs: true, source: true}, {name: "widgets.label", content: "A static piece of text.", docs: true, source: true, example: true}, {name: "widgets.legend", content: "A block of labels with colored squares to interact with the different quantities shown on the dashboard.", docs: true, source: true, example: true}, {name: "widgets.linechart", content: "An interactive line chart for trend type data.", docs: true, source: true, example: true}, {name: "widgets.map", content: "An interactive world map with convenience methods to show static or dynamic data.", docs: true, source: true, example: true}, {name: "widgets.picture", content: "A static image.", docs: true, source: true, example: true}, {name: "widgets.piechart", content: "An interactive pie chart for visualizing low dimensional categorical data.", docs: true, source: true, example: true}, {name: "widgets.slider", content: "A slider control element to interact with the data in one dimension.", docs: true, source: true, example: true}, {name: "widgets.status", content: "A static label with a value that can be dynamically updated.", docs: true, source: true, example: true}]}]}];

//- Adds menu entries recursively
mixin menuEntry(e, id, level)
    unless e.children
        a(href='#'+id) #{e.name}
    else
        input(id='s' + level + '-' + e.name, type='checkbox')
        label(for='s' + level + '-' + e.name) #{e.name}
        div(class='s' + level)
            each child in e.children
                +menuEntry(child, id+'-'+child.name, level+1)

//- Adds content entries recursively
mixin contentEntry(e, id, level)
    - var tag = 'h' + level
    #{tag}(id=id) #{e.name}
    if e.content
        | !{e.content}
    br
    if e.example
        | [&nbsp;
        a(href='catalogue/' + e.name + '.html') example
        | &nbsp;]&nbsp;
    if e.docs
        | [&nbsp;
        a(href='api/' + e.name + '.html') documentation
        | &nbsp;]&nbsp;
    if e.source
        | [&nbsp;
        a(href='dl/' + e.name + '.min.js') source
        | &nbsp;]
    if e.children
        each child in e.children
            +contentEntry(child, id + '-' + child.name, level+1)

doctype html
html(lang='en')
head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(rel='stylesheet', href='https://fonts.googleapis.com/css?family=Montserrat:200,300,700')
    each css in cssDependencies
        link(rel='stylesheet', type='text/css', href=dependencyDir + css + '.min.css')
    each js in jsDependencies
        script(src=dependencyDir + js + '.min.js')
    script.
        hljs.initHighlightingOnLoad();
    title home | #{name}
body
    input#menu(type='checkbox')
    label#open(for='menu') â˜°

    //- Navigation bar
    aside
        .logo #{name}
        nav
            div
                each section in sections
                    +menuEntry(section, section.name, 1)

    //- Main content
    main(style='margin-bottom:30px')
        label#exit(for='menu')
        each section in sections
            +contentEntry(section, section.name, 1)