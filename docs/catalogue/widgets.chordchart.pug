- var name = "chordchart"
- var links = {minjs: "widgets.chordchart", source: "widgets.chordchart", docs: "widgets.chordchart"}
- var libs = ["d3.v4", "lodash.4.17.4"]
- var modules = ["widget", "widgets.chordchart"]
- var description = "Chord charts represent <span class='good'>flow data</span> (provided as a matrix) between a set of categories. The angle of each sector (circumference) is proportional to the total out-flux of that category, and chords show the net in-flux, that is, they are colored by the category which has larger in-flux from the other. They are a convenient summary if there are <span class='good'>few categories</span>."
include pug/example
script.doc.
    // create chart
    var width = parseFloat(d3.select("#widget").style("width"));
    var height = parseFloat(d3.select("#widget").style("height"));
    var chordchart = new du.widgets.ChordChart("mychart", "#widget")
        .data([
            {source: "melon", target: "plum", value: 1},
            {source: "melon", target: "pear", value: 2},
            {source: "melon", target: "kiwi", value: 3},
            {source: "plum", target: "melon", value: 4},
            {source: "plum", target: "pear", value: 5},
            {source: "plum", target: "kiwi", value: 6},
            {source: "pear", target: "melon", value: 7},
            {source: "pear", target: "plum", value: 8},
            {source: "pear", target: "kiwi", value: 9},
            {source: "kiwi", target: "melon", value: 10},
            {source: "kiwi", target: "plum", value: 11},
            {source: "kiwi", target: "pear", value: 12},
            {source: "orange", target: "plum", value: 1},
            {source: "plum", target: "orange", value: 2}
        ])
        .x(width / 2 - height / 2)
        .radius(height / 2)
        .thickness(height / 30)
        .label("fruit trade")
        .margins(60)
        .fontSize(14)
        .ticks(true)
        .colors({
            plum: "#8E4585",
            banana: "gold",
            mango: "tomato",
            orange: "orange",
            melon: "green",
            kiwi: "limegreen",
            pear: "khaki"
        })
        .render();
script.doc.
    // add interactions
    chordchart
        .mouseover(function (k) {
            // Highlight hovered group
            chordchart.highlight(k, 300);
        })
        .mouseleave(function () {
            // Remove highlights by passing null
            chordchart.highlight(null, 300);
        })
        .click(function (k) {
            // Show an alert on click
            alert("Plot clicked: '" + k + "'");
        })
        .render();
script.doc.
    // update data
    setInterval(function() {
        data = [
            {source: "melon", target: "plum", value: parseInt(Math.random()*10)},
            {source: "melon", target: "pear", value: parseInt(Math.random()*10)},
            {source: "melon", target: "kiwi", value: parseInt(Math.random()*10)},
            {source: "plum", target: "melon", value: parseInt(Math.random()*10)},
            {source: "plum", target: "pear", value: parseInt(Math.random()*10)},
            {source: "plum", target: "kiwi", value: parseInt(Math.random()*10)},
            {source: "pear", target: "melon", value: parseInt(Math.random()*10)},
            {source: "pear", target: "plum", value: parseInt(Math.random()*10)},
            {source: "pear", target: "kiwi", value: parseInt(Math.random()*10)},
            {source: "kiwi", target: "melon", value: parseInt(Math.random()*10)},
            {source: "kiwi", target: "plum", value: parseInt(Math.random()*10)},
            {source: "kiwi", target: "pear", value: parseInt(Math.random()*10)},
            {source: "orange", target: "plum", value: parseInt(Math.random()*10)},
            {source: "plum", target: "orange", value: parseInt(Math.random()*10)}
        ];
        chordchart.data(data).render();
    }, 20000);
script.
    window.onresize = function () {
        width = parseFloat(d3.select("#widget").style("width"));
        height = parseFloat(d3.select("#widget").style("height"));
        chordchart
            .x(width / 2 - height / 2)
            .radius(height / 2)
            .thickness(height / 30)
            .render();
    };