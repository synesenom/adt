- var name = "contourplot"
- var links = {minjs: "widgets.contourplot", source: "widgets.contourplot", docs: "widgets.contourplot"}
- var libs = ["d3.v5", "lodash.4.17.4", "ranjs.1.9.1"]
- var modules = ["widget", "widgets.contourplot"]
- var description = "A contour plot can be used to show <span class='good'>data distributed on a plane</span> when only the <span class='good'>density</span> of the data points is of interest. Note that it is more appropriate to use when the value of the data points <span class='good'>changes slowly in space</span> and not recommended to visualize <span class='bad'>rapid changes</span> (both in space and time)."
include pug/example
script.doc.
    // create chart
    var width = parseFloat(d3.select("#widget").style("width"));
    var height = parseFloat(d3.select("#widget").style("height"));
    var normal1 = new ran.dist.Normal(7, 2);
    var normal2 = new ran.dist.Normal(1, 3);
    var contourplot = new du.widgets.ContourPlot("mychart", "#widget")
        .width(width)
        .height(height)
        .xLabel("x")
        .yLabel("y")
        .margins(40)
        .fontSize(14)
        .grid([50, 25])
        .layers(12)
        .borders(true)
        .colors(['transparent', 'yellowgreen', 'crimson'])
        .data(new Array(100000).fill(0).map(function (d, i) {
            return Math.random() < 0.3 ? {
                x: normal1.sample(),
                y: normal2.sample()
            } : {
                x: normal2.sample(),
                y: normal1.sample()
            }
        }))
        .tooltip(true)
        .tooltipTitleFormat(function(x) { return 'Altitude: ' + parseInt(x) + 'm'; })
        .tooltipXFormat(function(x) { return x.toFixed(2); })
        .tooltipYFormat(function(x) { return x.toFixed(2); })
        .render();
script.doc.
    // update data
    setInterval(function() {
        var r = Math.random();
        contourplot.data(new Array(100000).fill(0).map(function (d, i) {
            return Math.random() < r ? {
                x: normal1.sample(),
                y: normal2.sample()
            } : {
                x: normal2.sample(),
                y: normal1.sample()
            }
        })).render();
    }, 20000);
+resize()
